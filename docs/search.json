[
  {
    "objectID": "Tema3-3-Metodos-regresion.html",
    "href": "Tema3-3-Metodos-regresion.html",
    "title": "Tema 3. Tercera parte - Métodos regresión",
    "section": "",
    "text": "Una regresión es un modelo que analiza la relación entre una variable respuesta y una o más variables explicativas."
  },
  {
    "objectID": "Tema3-3-Metodos-regresion.html#regresión-lineal-simple",
    "href": "Tema3-3-Metodos-regresion.html#regresión-lineal-simple",
    "title": "Tema 3. Tercera parte - Métodos regresión",
    "section": "1.1 Regresión lineal simple",
    "text": "1.1 Regresión lineal simple\n\nRegresión lineal simple con variables cuantitativas\nVamos a comenzar por analizar la relación entre la pendiente y la riqueza\nLo primero antes de hacer un análisis es representar los datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHacemos la regresión empleando la función lm que tiene los siguientes argumentos\nformula con la forma y ~ x en la que se especifica cuál es la variable respuesta (y) y cuál la variable explicativa (x)\ndata en el que hay que especificar la tabla en la que están los datos\nEl resultado es una lista que contiene toda la información sobre los análisis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna vez que hemos hecho el análisis y antes de ver los resultados vamos a comprobar que los supuestos del análisis se cumplen. Igual que en el análisis de la varianza en los modelos de regresión lineal asumimos\n\nIndependencia de los datos\nNormalidad\nHomocedasticidad\n\nPara ello analizaremos los residuos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás, podemos hacer un gráfico Q-Q\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás, en los modelos de regresión suele ser necesario inspeccionar si existen puntos influyentes que tengan un peso excesivo en el análisis. Los puntos influyentes más comunes son los valores atípicos que son aquellos puntos en los que la respuesta observada no sigue el patrón establecido por el resto de los datos.\nUna forma de detectar puntos atípicos es empleando la distancia de Cook. La distancia de Cook se calcula eliminando un punto en el modelo y volviendo a calcular la regresión. Esto se repite para cada uno de los puntos.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComo ejercicio vamos a cambiar uno de los valores de la pendiente por un valor que sea 10 veces el máximo de pendiente observado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVolvemos a hacer el modelo de regresión y representamos las ditancias de cook\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRestauramos el valor original\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa función summary nos permite obtener un resumen de los resultados contenidos en el objeto lmS\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEl resultado indica que no hay una asociación significativa entre la pendiente y la riqueza de especies. Lo cual concuerda con el gráfico de dispersión en el que ya se intuía que no había relación alguna.\n\nEjercicio 1 Analiza si existe relación entre la diversidad de simpson y la pendiente\n\n\n\nRegresión lineal con variables categóricas\nLos modelos de regresión son muy flexibles y permiten analizar la relación entre una variable respuesta continua y variables explicativas categóricas. Por ejemplo, vamos a analizar el efecto del hábitat en la pendiente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ninspeccionamos los resultados\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCuando hay una variable categórica el modelo se construye en dos pasos.\n\nSe transforma la variable categórica en tantas variables dummy (valor 0,1) como niveles -1.\n\nUna regresión con un único factor y un ANOVA son equivalentes. Vamos a comprobarlo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-3-Metodos-regresion.html#selección-de-modelos-en-regresión-lineal-múltiple",
    "href": "Tema3-3-Metodos-regresion.html#selección-de-modelos-en-regresión-lineal-múltiple",
    "title": "Tema 3. Tercera parte - Métodos regresión",
    "section": "3. Selección de modelos en regresión lineal múltiple",
    "text": "3. Selección de modelos en regresión lineal múltiple\nEs frecuente que una o varias de las variables del modelo de regresión lineal no estén asociadas a la variable respuesta. Incluir variables que no son relevantes conlleva ajustar modelos innecesariamente complejos. Por lo tanto, es frecuente realizar un paso previo de selección antes de ajustar el modelo definitivo.\nUna función útil en este sentido el la función stepAICdel paquete MASS.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara obtener un resumen del proceso usamos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos ver la tabla de resultados del modelo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEstas dos opciones son válidas pero tienen algunas limitaciones ya que no garantiza que la combinación de variables sea optima y puede sergar tanto los valores de los parámetros. Una solución es calcular todos los modelos posibles y seleccionar el mejor. Esto se puede hacer con el paquete glmulti. Tenéis un ejemplo de uso del paquete aquí\nSin embargo, incluso cuando calculamos todos los modelos muchas veces no hay certeza de que el modelo seleccionado sea el mejor porque sabemos que aquellos modelos que distan dos puntos de AIC en realidad son equivalentes entre sí. Por eso, recientemente se ha propuesto incorporar la incertidumbre en la selección de modelos a la hora de describir los resultados. Para esto podéis emplear el paquete MuMIn. Tenéis un ejemplo de aplicación en esta página\nEn cualquier caso es importante que tengáis en cuenta que ningún método es perfecto y que lo ideal es seleccionar las variables a incluir en el modelo con criterios científicos."
  },
  {
    "objectID": "Tema3-1-Indices.html",
    "href": "Tema3-1-Indices.html",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "En la próxima sesión vamos a explorar índices de biodiversidad. Para ello vamos a emplear bases de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos con el que ya estáis familiarizados. La base de datos original podéis descargarla aquí\nRecordad que los los datos provienen de un estudio de plantas que se realizó en parcelas de 20 x 20 m. Los datos de abundancia corresponden la cobertura de cada especie en proporción al total de la parcela.\n\n\nVamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#cargar-datos",
    "href": "Tema3-1-Indices.html#cargar-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "Vamos a cargar los datos directamente de una página web. En R esto es muy sencillo si los datos tienen el formato adecuado. De hecho, vamos a emplear el mismo código que empleamos cuando cargamos datos desde un archivo guardado en nuestro ordenador.\nPara ver el formato en el que los datos están almacenados en la nube pinchad aquí\nCargamos los datos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ny echamos un vistazo a las primeras filas para comprobar que los datos se han cargado correctamente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#resumen-de-datos",
    "href": "Tema3-1-Indices.html#resumen-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Resumen de datos",
    "text": "Resumen de datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComprobamos las dimensiones de nuestra matriz que nos dicen el número de parcelas (primer número, filas) y el número de especies (segundo número, columnas)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#representación-de-datos",
    "href": "Tema3-1-Indices.html#representación-de-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Representación de datos",
    "text": "Representación de datos\nAdemás, es buena idea representar histogramas de distribución de datos. Por ejemplo de las especies. Esta gráfica nos muestra que en la mayor parte de las cuadrículas Antennaria parviflora tiene un cobertura entre 0 y 10 % pero que en alguna de las cuadrículas puede llegar a ocupar el 70%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-1-Indices.html#otras-operaciones-para-explorar-los-datos",
    "href": "Tema3-1-Indices.html#otras-operaciones-para-explorar-los-datos",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "Otras operaciones para explorar los datos",
    "text": "Otras operaciones para explorar los datos\nPodemos ver qué especie es la más abundante. Para ello tenemos que sumar los valores de cada columna. Podríamos hacerlo columna a columna. Por ejemplo, para la especie de la segunda columna que es Antennaria parviflora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSi tenemos 100 especies esto implicaría repetir el código de arriba 100 veces. Sin embargo, existe una forma rápida y sintética de hacer esto mismo utilizando la función ColSums.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás podemos ver cuál de las parcelas tiene la mayor cobertura\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro2.html",
    "href": "Tema1-Intro2.html",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "href": "Tema1-Intro2.html#r-un-lenguaje-orientado-a-objetos",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "",
    "text": "Ya hemos visto que R es un lenguaje orientado a objetos. En esta parte del tema nos vamos a centrar en entender esto mejor y explorar los distintos tipos de objetos."
  },
  {
    "objectID": "Tema1-Intro2.html#tipos-de-objetos",
    "href": "Tema1-Intro2.html#tipos-de-objetos",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "2. Tipos de objetos",
    "text": "2. Tipos de objetos\nCada tipo de objeto tiene unas propiedades determinadas que estudiaremos poco a poco. Los objetos más sencillos son los vectores. Los tipos objetos de R qué trabajaremos son en principio: vectores, listas, matrices y data frames.\n\n2.1 Vectores\nUn vector es una secuencia o concatenacion de valores.\n\nCómo crear vectores\nPara definir un vector utilizamos la función c(). Dentro de los paréntesis indicamos los valores que queremos concatenar. Algunos ejemplos son:\n\n\nEjercicio 1. Crear vectores\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2: Crear vectores de secuencias de números\nTambién podemos utilizar la función seq() para generar secuencias de números en un rango determinado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAcordaros que podemos generar un vector de datos numericos de esta manera, pero si queremos guardarlo como un objeto debemos asignarle un nombre utilizando este simbolo &lt;-\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos utilizar el símbolo : para hacer secuencias de números, o de números y texto. Podemos utilizar la función class() para preguntar de qué clase son los elementos que contiene un vector. La única regla para un vector es que solo puede contener elementos de una misma clase.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 3. Averiguar la longitud de un vector\nOtra función interesante es la función length(). Sirve para conocer la longitud de un vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Cuál es la longitud de este otro vector?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCómo acceder a los elementos de un vector\nPodemos utilizar los [] para preguntarle a un vector por valores en posiciones concretas. Por ejemplo en el vector v, consulto el valor del elemento en la posición 3.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOJO ¿Qué crees que pasará si le asigno un valor no numérico?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "href": "Tema1-Intro2.html#qué-es-la-clase-categoría-de-un-objeto-en-r",
    "title": "Tema 1. Segunda parte - Introducción general a R.",
    "section": "2.2 ¿Qué es la clase (categoría) de un objeto en R?",
    "text": "2.2 ¿Qué es la clase (categoría) de un objeto en R?\nEn R, cada objeto tiene una clase, que le dice al lenguaje qué tipo de cosa es ese objeto y cómo debe tratarlo.\n\n\n\n\n\n\nMetáfora: la mochila de cada objeto\nImagina que cada objeto en R lleva una mochila con una etiqueta que dice:\n\n“Soy un número”, “Soy una tabla”, “Soy un texto”, “Soy una fecha”…\n\nEsa etiqueta es su clase. R la usa para saber qué puede hacer con ese objeto.\n\n\n¿Cómo averiguar la clase?\nUsamos la función class() para averiguarlo:\n\nEjercicio 4. Averiguar la clase (categoría) de un objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 5. Explorando la importancia de la clase\nCaso 1: objeto\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n¿Qué aprendemos de esto?\n\nLas funciones en R dependen de la clase del objeto.\nSi usas una función con una clase no compatible, R te dará un mensaje de error.\nPor eso es útil usar class() o str() para diagnosticar antes de aplicar funciones.\n\nNOTA IMPORTANTE todos los elementos dentro de un vector deben ser de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.2 Listas\nLas listas son un tipo especial de objeto que puede contener elemento de diferentes clases.\nEs como un cajón de sastre: puedes meter dentro números, textos, vectores, tablas, funciones… Incluso se pueden crear listas de listas. Vamos que puedes meter lo que quieras en una lista\n\n¿Qué diferencia a una lista de un vector?\n\nUn vector normal (como c(1, 2, 3)) solo puede contener elementos del mismo tipo: todos números, o todos textos.\nUna lista, en cambio, puede mezclar tipos: puedes tener un número, un vector, una tabla, una función… todo junto.\n\n\n\nCómo crear listas\nLas listas se crean con la función list(), la cual puede tomar un número arbitrario de argumentos:\nPodemos crear una lista sencilla de elementos de la misma clase\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO volvernos locos y anidar listas con elementos de clases diferentes\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCómo acceder a los elementos de una lista\nPodemos acceder por al posición de cada elemento dentro de la lista utilizando los [], parecido a cómo hacíamos con los vectores.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[1]: devuelve una sublista:\n\nEl resultado sigue siendo una lista, que contiene el primer elemento.\nEs útil si quieres mantener la estructura de lista.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmilista[[1]]: devuelve el contenido del primer elemento\n\nEl resultado es el objeto que está dentro, no una lista.\n\nEs útil si quieres trabajar directamente con el valor.\n¿Y con las listas anidadas? ¿Cómo accedemos a los valores?\n\n\nEjercicio 5. Prueba a cambiar el número de corchetes en los dos niveles de selección\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLos elementos de una lista pueden tener nombre\nLos elementos de una lista pueden tener nombre.\n\n\nEjercicio 6. Averiguar y poner nombre a los elementos de una lista\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 7. Buscar el elemento de la lista por nombre\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.3 Matrices\nEn R, una matriz es una estructura de datos bidimensional que contiene elementos del mismo tipo (por ejemplo, todos numéricos o todos caracteres). Es como una tabla sin nombres de columnas ni filas, donde cada celda tiene una posición definida por su fila y columna.\n\nCómo crear una matriz\nPara crear matrices utilizamos la función matrix(). La función matrix() permite organizar los datos en una matriz con tantas filas y columnas como se indiquen. Debemos indicar por lo tanto, el número de filas, el número de columnas y los datos que queremos que aparezcan en su interior. En este caso, los datos se aportan en forma de vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAcceso a los elementos de una matriz\nPara acceder a los elementos de una matriz utilizamos los [], pero indicamos en su interior la posición de la fila y la columna a la cual queremos acceder. Con la , indicamos “todo” (todas las filas o todas las columnas)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCambiar valores dentro de una matriz\nVeamos primero cómo recortar la matriz y asignarle un nombre:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara cambiar valores concretos dentro de la matriz, primero accedermos a ese elemento y le asignamos otro valor:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podemos seleccionar una submatriz, y sustituirla por otra matriz del mismo tamaño:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n2.4 Data frames\nLos data frames se utilizan para almacenar datos en formas de tablas. Es decir, en filas y columnas como se utilizan habitualmente en Excell. Esta tablas o data frames pueden almacenar datos de diferentes tipos: números, character, enteros (integer)…En un data frame cada columna representa una variable, y cada columna puede contener un tipo de elemento diferente. A diferencia de las matrices que solo pueden contener elementos del mismo tipo.\nUna de las limitaciones del data frame, es que todas las columnas tienen que tener la misma longitud. Si no fuese así, sería UNA LISTA, es decir una coleccion de objetos o variables de cualquier, tipo, longitud o estructura.\nNormalmente cuando cargamos una base de datos, o importamos una colección de datos, estamos creando un data frame. Ahora podéis comprobar que la colección de datos iris que hemos cargado anteriormente es un data frame.\n\n2.4.1 Como crear un data frame\nVamos a pedir ayuda a R sobre la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPodemos crear un data frame con la función data.frame()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién se puede crear el data frame de forma directa, sin generar los vectores previamente, así:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora vamos a consultar diferentes atributos con las funciones class(), mode(), is.data.frame() y is.list()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna característica interesantes es que un data frame también es una lista. Pero cuidado, una lista no es un data.frame. Para serlo tiene que cumplir el requisito de que todos los elementos que contiene tengan la misma longitud.\notras funciones interesantes para conocer un data frame:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.4.1 Acceso a los elementos de un data frame\nPara acceder a los elementos de un data frame se utilizan los [] y $, de forma similar a como hemos venido haciendo con vectores y listas.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSe pueden hacer otro tipo de consultas que nos devuelven un vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVamos a acceder a los datos utilizando el simbolo $\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOtras consultas que puedo hacer sobre los datos del data frame es con las funciones dimnames(), rownames(), colnames(), table(), head() y tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenid@ al curso de Análisis de la biodiversidad en R y SIG",
    "section": "",
    "text": "Bienvenid@ al curso de Análisis de la biodiversidad en R y SIG\nEste curso es parte de la asignatura “Análisis de la biodiversidad en R y SIG” del Máster en Biodiversidad de la Universidad Autónoma de Madrid. Lo que está aquí recogido es la parte que corresponde al análisis de la biodiversidad en R.\nPuedes consultar el programa de la asignatura aquí\nEste curso es el resultado del trabajo colectivo de varios profesores. Si quieres utilizarlo puedes hacerlo pero recuerda citar la fuente.\nPara empezar a abrir boca vamos a rellenar una encuesta"
  },
  {
    "objectID": "Tema1-Intro1.html",
    "href": "Tema1-Intro1.html",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "",
    "text": "Comprender qué es R y cómo instalarlo.\nEjecutar comandos básicos en R.\nFamiliarizarse con RStudio y su interfaz.\nImportar y exportar datos en distintos formatos.\nOrganizar el trabajo en proyectos de R."
  },
  {
    "objectID": "Tema1-Intro1.html#objetivos-de-aprendizaje",
    "href": "Tema1-Intro1.html#objetivos-de-aprendizaje",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "",
    "text": "Comprender qué es R y cómo instalarlo.\nEjecutar comandos básicos en R.\nFamiliarizarse con RStudio y su interfaz.\nImportar y exportar datos en distintos formatos.\nOrganizar el trabajo en proyectos de R."
  },
  {
    "objectID": "Tema1-Intro1.html#qué-es-r",
    "href": "Tema1-Intro1.html#qué-es-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "1. ¿Qué es R?",
    "text": "1. ¿Qué es R?\n\nR es un lenguaje de programación libre y gratuito, especialmente indicado para análisis estadístico y elaboración de gráficos.\nTodo el código de R está disponible como software libre bajo las condiciones de licencia GNU-GPL. Esto implica que cualquier usuario final puede usar, estudiar, compartir (copiar) y modificar el software.\nPuedes acceder al proyecto R en: http://www.r-project.org"
  },
  {
    "objectID": "Tema1-Intro1.html#instalación-de-r",
    "href": "Tema1-Intro1.html#instalación-de-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "2. Instalación de R",
    "text": "2. Instalación de R\nSigue las instrucciones en https://cran.r-project.org/ para instalar R según tu sistema operativo.\n\n2.1 Usuarios de Windows\nPara usuarios de Windows, selecciona el enlace ‘Download R for Windows’, luego haz clic en el enlace ‘base’ y finalmente en ‘Download R 4.5.1 for Windows’. Esto iniciará la descarga del archivo de instalación .exe.\nUna vez completada la descarga, haz doble clic en el archivo ejecutable de R y sigue las instrucciones en pantalla.\nLas instrucciones completas de instalación se pueden encontrar en el sitio web de CRAN.\n\n\n\n2.2 Usuarios de Mac\nPara usuarios de Mac, selecciona el enlace ‘Download R for (Mac) OS X’. El archivo binario se puede descargar seleccionando ‘R-4.3.3.pkg’.\nUna vez descargado, haz doble clic en el icono del archivo y sigue las instrucciones en pantalla para completar los pasos necesarios.\nConsulta el documento ‘R for Mac OS X FAQ’ para más información sobre la instalación.\n\n\n\n2.3 Usuarios de Linux\nPara usuarios de Linux, el método de instalación dependerá de la distribución que estés utilizando. Hay instrucciones bastante completas para Debian, Redhat, Suse y Ubuntu.\nEn la mayoría de los casos, puedes usar el gestor de paquetes de tu sistema operativo para instalar R desde el repositorio oficial.\nEn Ubuntu, abre una terminal y ejecuta los siguientes comandos (necesitarás permisos de administrador):\nsudo apt update\nsudo apt install r-base\nSi recibes un error al ejecutar los comandos anteriores, puede que necesites añadir una entrada a tu archivo sources.list. Para hacerlo, abre el archivo /etc/apt/sources.list en tu editor de texto favorito (gedit, vim, nano, etc.) y añade la siguiente línea (también necesitarás permisos de administrador):\ndeb https://cloud.r-project.org/bin/linux/ubuntu disco-cran35/\nUna vez hecho esto, vuelve a ejecutar los comandos apt anteriores y deberías estar listo para comenzar.\n\n\n2.4 Primeros ejercicios: Aprende a utilizar la consola de R\n\nAbre la consola de R\n\n\n\nImprimir valores\n\"Bienvenidos al curso de R y SIG\"\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOperar\nEl uso más sencillo que se le puede dar a R es el de una calculadora. Consideremos las siguientes operaciones:\n\nSumar: +\nRestar: -\nMultiplicar: *\nDividir: /\nExponenciar: ^\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCrear objetos con &lt;-\nObjetivo: Guardar valores en objetos para usarlos más adelante.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 1. Crea el objeto y y asignale el valor 3\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2. Imprime el objeto y\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCrear vectores\nPodemos crear vectores utilizando c()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOperar con objetos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLo interesante de esto es que puedes operar con vectores\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Cuál es el resultado?\n\n\nUtilizar funciones\n¿Qué es una función en R?\nUna función en R es una herramienta que realiza una tarea específica. Si piensas en analizar datos como si fuera cocinar las funciones son como robots de cocina: le das una entrada (argumentos o ingredientes), realiza una operación (pica, tritura o calienta), y te devuelve una salida (resultado, plato hecho).\nR viene con un montón de funciones listas para usar. Por ejemplo, la función mean() calcula la media de un conjunto de números.\n¿Cómo usar funciones ya creadas?\nPara utilizar las funciones en R solo necesitas:\n\nEscribir el nombre de la función.\nProporcionar los argumentos necesarios entre paréntesis.\n\nEjemplo 1: Funciones con un argumento. Calcular la media y la raíz cuadrada\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEjemplo 2: Funciones con más de un argumento. Logaritmo y redondeo\nAlgunas funciones en R necesitan más de un dato para funcionar. Por ejemplo, si quieres redondear un número, puedes decirle cuántos decimales usar. Puedes escribir los datos en orden o decirle a R cuál es cuál usando el nombre del argumento. Así tienes más control sobre lo que hace la función.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Has visto la parte de código después de #? Eso es un comentario. R ignorará todo lo que esté en esa fila y no lo ejecutará, sirve para anotar el código y que más tarde podamos recordar porqué hicimos algo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn los ejemplos de arriba hemos nombrado los argumentos de forma explícita pero esto no es estrictamente necesario. Si no se nombran la función opera igualmente\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPero OJO 👀 si no nombramos los argumentos no se pueden cambiar de orden\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Cómo sé qué orden tengo que poner?\nTengo que consultar la ayuda de la función\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro1.html#qué-es-rstudio",
    "href": "Tema1-Intro1.html#qué-es-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "3. ¿Qué es RStudio?",
    "text": "3. ¿Qué es RStudio?\nRStudio es un entorno de desarrollo integrado (IDE, por sus siglas en inglés) diseñado específicamente para trabajar con el lenguaje de programación R. Es una herramienta que facilita la escritura de código, la visualización de datos, la creación de gráficos y la elaboración de informes."
  },
  {
    "objectID": "Tema1-Intro1.html#instalación-de-rstudio",
    "href": "Tema1-Intro1.html#instalación-de-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "4. Instalación de Rstudio",
    "text": "4. Instalación de Rstudio\n\n4.1 Windows\n\nVe a la página oficial: https://posit.co/download/rstudio-desktop/\nHaz clic en Download RStudio for Windows.\nEjecuta el archivo .exe descargado.\nSigue los pasos del instalador (siguiente, siguiente… ¡listo!).\n\n\n\n4.2 Linux\n\nElige tu distribución (Ubuntu, Fedora, etc.) en la página de descargas.\nDescarga el archivo .deb (para Ubuntu/Debian) o .rpm (para Fedora).\nInstala desde terminal:\n\nsudo dpkg -i rstudio-x.yy.zzz-amd64.deb\n\n\n4.3 macOS\n\nDescarga el instalador para macOS desde la misma página.\nAbre el archivo .dmg y arrastra RStudio a la carpeta Aplicaciones.\nÁbrelo desde Launchpad o Finder."
  },
  {
    "objectID": "Tema1-Intro1.html#primeros-pasos-en-rstudio",
    "href": "Tema1-Intro1.html#primeros-pasos-en-rstudio",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "5. Primeros pasos en RStudio",
    "text": "5. Primeros pasos en RStudio\nAl abrir RStudio verás cuatro paneles principales. El más importante es la consola, donde puedes ejecutar comandos.\n\n\n5.1 Consola\nFunción: Ejecutar código y ver resultados inmediatos\nConsejo: Ideal para pruebas rápidas y exploración\nEs igual que la consola que hemos manejado cuando hemos abierto R sin Rstudio (ver ejercicios 1 a 5)\n\n\n5.2 Panel de edición (Script)\nFunción: Escribir y guardar código en archivos .R, .Rmd o .qmd\nConsejo: Ejecuta líneas con Ctrl + Enter (Windows/Linux) o Cmd + Enter (macOS\n🧾 ¿Qué es un script en R? Un script en R es un archivo de texto donde puedes escribir, guardar y reutilizar conjuntos de instrucciones. Es como una libreta de recetas para tus análisis de datos.\n🧑‍🍳 Una metáfora culinaria: Si pensamos en el análisis de datos como si fuera una actividad de cocina, un script sería como tu libro de cocina:\n\nCada línea de código es como un paso de una receta. Puedes seguirla paso a paso, modificar ingredientes (datos) o repetirla cuando quieras. Guardar tus scripts te permite documentar tu trabajo y reproducir tus análisis fácilmente.\n\n\nEjercicio 3: Crea y guarda tu primer script\nEn este ejercicio aprenderás a crear tu primer script en R usando RStudio. Un script es un archivo donde puedes escribir y guardar tu código para ejecutarlo más tarde.\nPaso 1: Abrir el editor de scripts\nVe al menú File &gt; New File &gt; R Script.\nPaso 2: Escribir tu primer script de código\nEscribe el siguiente código en el script:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPaso 3: Guarda tu primer script\nUna vez que hayas escrito tu código en el editor de panel de edición, sigue estos pasos para guardarlo:\n\nHaz clic en el menú File (Archivo).\nSelecciona Save o presiona el atajo de teclado Ctrl + S (Windows/Linux) o Cmd + S (macOS).\nElige una carpeta donde quieras guardar tu archivo.\nEscribe un nombre para tu script, por ejemplo: primer_script.R\nHaz clic en Guardar.\n\n\n\nEjercicio 4: Ejecuta el código del script\nEjecutar una sola línea\n\nColoca el cursor en la línea que quieres ejecutar.\nPresiona Ctrl + Enter (Windows/Linux) o Cmd + Enter (macOS).\nEl resultado aparecerá en la consola (panel inferior izquierdo).\n\nEjecutar varias líneas\n\nSelecciona varias líneas de código con el ratón o el teclado.\nPresiona Ctrl + Enter o Cmd + Enter.\nTodas las líneas seleccionadas se ejecutarán en orden.\n\nEjecutar todo el script\n\nVe al menú Code &gt; Run Region &gt; Run All\no haz clic en el botón Source (ícono de hoja con flecha verde) en la parte superior del script.\nTambién puedes usar el atajo Ctrl + Shift + Enter (Cmd + Shift + Enter en macOS).\nTodo el contenido del script se ejecutará en la consola.\n\n\n\n\n5.3 Entorno de trabajo / Historial\nFunción: Ver objetos creados (variables, funciones, etc.) y el historial de comandos\nConsejo: Útil para revisar qué has hecho y qué está disponible\nEn R, el entorno de trabajo es el espacio donde se almacenan los objetos que creamos (vectores, funciones, data frames, etc.). Podemos inspeccionar, modificar y limpiar este entorno usando funciones específicas.\n\nCrear, listar y borrar objetos en el entorno de trabajo\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n5.4 Archivos / Gráficos / Paquetes / Ayuda / Viewer\n\nFunciones:\n\nVer gráficos generados\nGestionar paquetes\nConsultar ayuda de funciones\nNavegar por archivos del proyecto\n\n\nEste panel de RStudio permite gestionar varios aspectos clave del entorno de trabajo. Vamos a centrarnos en paquetes, con ejemplos aplicados a biodiversidad.\nPaquetes Los paquetes en R son colecciones de funciones, datos y documentación que amplían las capacidades básicas del lenguaje. Para trabajar con biodiversidad, hay paquetes muy útiles que permiten cargar datos ecológicos, calcular índices de diversidad, y visualizar mapas o redes de especies.\n\n¿Cómo se instalan y cargan?\nADVERTENCIA: Los siguientes ejercicios requieren el paquete vegan, que no está disponible en webR. Para ejecutarlo, usa R en tu ordenador local.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n¿Cómo se usan los paquetes?\nIgual que con las funciones podemos buscar la ayuda\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUso de la función specnumber del paquete vegan\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema1-Intro1.html#aprender-a-cargar-y-guardar-datos",
    "href": "Tema1-Intro1.html#aprender-a-cargar-y-guardar-datos",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "6. Aprender a cargar y guardar datos",
    "text": "6. Aprender a cargar y guardar datos\n\n6.1 Importar datos al entorno de trabajo\nPara poder proceder con un análisis de datos, debemos cargar los datos en R. En este tutorial aprenderemos a importar y exportar datos en diferentes formatos. Hemos seleccionado los más comunmente utilizados.\nPodemos importar en formato texto o tabulares desde un archivo .txt o .csv Podemos importar directamente desde Excel, archivos .xls o .xlxs También existen formatos propios de R, como los .Rdata o .rda y los serialized R objects .rds\n\n\n6.2 Cargar datos integrados\nR viene con varios conjuntos de datos ya cargados que puedes usar para practicar sin tener que importar nada. Puedes escribir data() para ver la lista completa.\nPara cargar los datos integrados basta con escribir data() y el nombre de los datos.\n\n\nCargar datos integrados\nDurante este ejercicio vamos a utilizar el conjunto o set de datos iris. Este conjunto de datos, contiene datos sobre características florales de tres especies del género Iris.\nPara cargarlo utilizaremos la función data(), y lo exploraremos utilizando la función head() que nos permite visualizar las primeras 6 filas. También vamos a introducir nuevas funciones que nos permitirán explorar el conjunto de datos iris: dim() colnames() y tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n6.3 Importar datos desde CSV\nAunque esta forma de importar datos puede ser muy útil para probar funciones o aprender a escribir código lo normal es que queramos cargar una base de datos propia. Uno de los formatos más sencillo de importar y que además ofrece buenas propiedades de interoperabilidad es el .csv\nVamos a trabajar con los datos de una base de datos de la abundancia de especies en herbazales de Alberta en Estados Unidos.\nLos datos de composición específica consisten típicamente en observaciones de la presencia o abundancia de las especies en diferentes localidades.\nEn el ejemplo que vamos a emplear los datos provienen de un estudio de plantas que se realizó en parcelas de 20 x 20 m. Los datos de abundancia corresponden la cobertura de cada especie en proporción al total de la parcela.\nComenzaremos por descargar los datos desde aquí\n\nNOTA: Los datos originales provienen de un taller sobre análisis de la biodiversidad en R que se pueden encontrar aquí.\n\n\nEjercicio 5. Carga los datos de comunidades de Alberta\nPara cargar el archivo tienes que cambiar el texto “path_to_my_data” por la ruta del archivo. Para ello:\n\nBusca el archivo en la carpeta “Descargas”\nAbre el Explorador de archivos. Ve a Descargas y localiza el archivo que quieres usar (por ejemplo, datos.csv).\nHaz clic derecho sobre el archivo\nSelecciona “Propiedades”.\nCopia la Ruta de acceso que aparece (por ejemplo: C:\\Users\\TuNombre\\Downloads\\datos.csv).\nCambia las barras invertidas \\ por barras normales /\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOJO\nCuando ejecutamos el código, R lee el archivo y muestra el contenido en la consola, pero no lo guarda. Es como mirar el resultado sin ponerle nombre: lo ves, pero no puedes volver a usarlo.\n¿Cómo guardarlo?\nPara guardar el resultado, hay que asignarlo a un objeto usando &lt;-:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTruco sucio: Usar el panel “Área de trabajo” para cargar archivos\n\nHaz clic en el botón “Import Dataset”\nEn el panel Environment, busca el botón que dice “Import Dataset” y haz clic.\nSelecciona “From Text (base)”\nSi tu archivo es .csv o .txt, elige esta opción.\nHaz clic en “Browse…”\nSe abrirá una ventana para buscar el archivo.\n📁 Navega a la carpeta Descargas y selecciona tu archivo.\nRStudio genera el código automáticamente\nVerás una vista previa del archivo y RStudio te mostrará el código que usará para cargarlo.\nPuedes copiar ese código para usarlo en tus scripts.\n\n\n\n\n6.4 EXTRA: Importar datos desde Excell\nImportar datos desde Excell es muy parecido a la importación de datos desde .csv. Las funciones que utilizaremos son write.xlsx() para la exportación y read.xlsx() para la importación.\n\nEjercicio Extra Importar datos desde excel\n\n# instalar el paquete\n# install.packages(\"xlsx\")  \n\n# abrir la librería\nlibrary(xlsx)  \n\nwrite.xlsx(iris, \"data/iris.xlsx\")  # acuerdate que los vamos a guardar en la carpeta data  \n\niris_import_xlsx &lt;- read.xlsx(\"data/iris.xlsx\", 1) # debemos indicar la hoja de Excell desde la cual importar los datos\n\nAunque pongo esto aquí la mejor forma de cargar un archivo excel es exportarlo como csv y cargarlo ;-)"
  },
  {
    "objectID": "Tema1-Intro1.html#errores-comunes-al-cargar-archivos-csv-en-r",
    "href": "Tema1-Intro1.html#errores-comunes-al-cargar-archivos-csv-en-r",
    "title": "Tema 1. Primera parte - Introducción general a R",
    "section": "7. Errores comunes al cargar archivos CSV en R",
    "text": "7. Errores comunes al cargar archivos CSV en R\nComenzaremos por descargar los datos desde aquí\n{webr-r, error=TRUE} datos &lt;- read.csv(\"misdatos/datos_con_errores.csv\", sep = \";\") datos\n\n\nError 1: Ruta archivo incorrecta\n“Cannot open de connection” o “No such file or directory”\nComprobar:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 6 Carga el archivo\n\n# Escribe aquí o en tu consola de R el código para cargar el archivo\n\n\n\nError 2: Separadores incorrectos\nEl archivo se carga pero todas las columnas aparecen en una sola. Esto sucede porque el archivo usa ; como separador mientras que read.csv por defecto usa ,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nError 3: Valores ausentes\nAlgunas celdas están vacías. ¿Cómo las identificamos?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema2.html",
    "href": "Tema2.html",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "",
    "text": "Introducir el paquete tidyverse y su filosofía.\nAprender a importar, explorar, transformar y filtrar datos.\nAplicar funciones clave de dplyr y tidyr en datos reales de biodiversidad.\nDiagnosticar errores comunes al manipular datos."
  },
  {
    "objectID": "Tema2.html#qué-es-el-universo-tidyverse",
    "href": "Tema2.html#qué-es-el-universo-tidyverse",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "¿Qué es el universo tidyverse?",
    "text": "¿Qué es el universo tidyverse?\nEl universo tidyverse es como una caja de herramientas moderna para R. Incluye paquetes como dplyr, ggplot2, tidyr, readr, entre otros, que están diseñados para que el código se lea de izquierda a derecha, como si estuvieras contando una historia.\nLo primero que hay que hacer es instalarse los paquetes de tidyverse.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora aprenderemos a usar algunas de las funciones más importantes de tidyverse"
  },
  {
    "objectID": "Tema2.html#seleccionar-columnas-y-filtrar-filas",
    "href": "Tema2.html#seleccionar-columnas-y-filtrar-filas",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "1. Seleccionar columnas y filtrar filas",
    "text": "1. Seleccionar columnas y filtrar filas\nVamos a seguir trabajando con la base de datos de comunidades de Alberta que puedes descargar aquí\n\nEjercicio 1. ¿Recuérdas cómo se cargaba?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nSeleccionar columnas\nPara seleccionar columnas usamos la función select(). Empecemos con un ejemplo sencillo, escoger las columnas plot y Carex filifolia.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTIP: Prueba a seleccionar otras columnas\nLa función select() es muy flexible y tiene muchos argumentos, dentro de esos argumentos podemos usar funciones. Por ejemplo, podemos seleccionar todas las columnas de las especies de Artemisia utilizando la función starts_with() dentro de select()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHay muchas otras funciones para facilitar seleccionar conjuntos de columnas como ends_with(), contains(). Puedes encontrar más ejemplos en este enlace\n\n\nFiltrar filas\nTambién podemos filtrar filas. Para ello usamos la función filter().\nPor ejemplo, para filtrar todas las parcelas donde Antennaria parviflora tiene más de 2 individuos usamos:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema2.html#pipes",
    "href": "Tema2.html#pipes",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "2. Pipes",
    "text": "2. Pipes\nEl operador pipe %&gt;% (pipe) es uno de los más interesantes en tidyverse, en vez de escribir funciones dentro de funciones (como en base R), en tidyverse podemos conectar pasos de forma secuencial usando este operador.\nVamos con un ejemplo sencillo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFíjaos que el código de arriba es equivalente a mean(n). El operador pipe %&gt;% se puede entender como “y después haz”. Lo que hace es coger el resultado del código que está a la izquierda y pasarlo como primer argumento a la función que está a la derecha\n\nEjercicio 2 ¿Y si queremos hacer la raíz cuadrada de la media? ¿Cómo haríamos usando %&gt;%?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAhora vamos a trabajar con la base de datos de Alberta\n\n\nEjercicio 3 Selecciona solo las columnas de Antennaria y filtra las parcelas donde Artemisia_frigida tenga abundancia mayor que 20.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMostrar/Ocultar solución\n\n\nSolución:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEs importante tener en cuenta que el pipe pasa al primer argumento de la función. Cuando queremos pasar el resultado del pipe a un arguemnto que no es el primero de la función hay que poner un punto . para especificar donde debería ir."
  },
  {
    "objectID": "Tema2.html#mutate-crear-y-modificar-columnas",
    "href": "Tema2.html#mutate-crear-y-modificar-columnas",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "3. Mutate: Crear y modificar columnas",
    "text": "3. Mutate: Crear y modificar columnas\nVamos a explorar la forma en la que podemos crear y modificar columnas con la función mutate. Por ejemplo, vamos a crear una nueva columna multiplicando por 10 la abundancida de la especie Antennaria parviflora\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa función es muy flexible y nos permite hacer operaciones bastante complejas en un solo paso. Por ejemplo, podemos crear una variable categórica que sea “sí” cuando Antennaria parviflora es mayor 10 y “No” cuando es menor o igual a 10.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO calcular el porcentaje de la especie con respecto al total\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-2-Metodos-anova.html",
    "href": "Tema3-2-Metodos-anova.html",
    "title": "Tema 3. Segunda parte - Anova",
    "section": "",
    "text": "En las siguientes sesiones vamos a centrarnos en métodos de comparaciones. Hemos incluido en este apartado aquellos métodos comunes que se emplean para estudiar el efecto de uno o más factores cada uno con sus respectivos niveles.\nVamos a emplear una base de datos de abundancia de especies en herbazales de Alberta en Estados Unidos. Los datos provienen de un taller sobre análisis de la biodiversidad en R que podéis encontrar aquí\nEn esta misma base de datos hay recogidas una serie de características ambientales de las parcelas como son la pendiente “slope”, la orientación “aspect” y la humedad relativa “rel.moisture”.\nComenzamos por cargar los datos:\nVamos a comenzar con una pregunta sencilla. Queremos averiguar si hay diferencias en riqueza de especies en función de las características ambientales de las parcelas.\nPara ello a partir de la tabla de comunidades calculamos la riqueza\nComprobamos que las cuadrículas están ordenadas de la misma manera en la tabla de condiciones ambientales y la de composición específica ¡esto es muy importante!\nSi no lo estuvieran podemos reordenarlos con la siguiente línea"
  },
  {
    "objectID": "Tema3-2-Metodos-anova.html#análisis-de-la-varianza-factores-con-dos-níveles",
    "href": "Tema3-2-Metodos-anova.html#análisis-de-la-varianza-factores-con-dos-níveles",
    "title": "Tema 3. Segunda parte - Anova",
    "section": "1.2. Análisis de la varianza, factores con dos níveles",
    "text": "1.2. Análisis de la varianza, factores con dos níveles\nVer aquí https://biocosas.github.io/R/050_anova.html\n¿Varían estos dos hábitats en cuanto a su pendiente, orientación y humedad relativa?\nPara contestar a esta pregunta vamos a utilizar un análisis de la varianza\n\nEstimar el modelo ANOVA\nPrimero representamos los datos utilizando un gráfico de caja y bigotes\nboxplot(env_alberta$slope ~ env_alberta$habitat)\nAhora vamos a utilizar la función aov para calcular un análisis de la varianza y comprobar si las diferencias entre grupos son mayores que las diferencias intra grupos\nLa función aov tiene dos argumentos:\n\nformula una fórmula que especifique el modelo en la que a la izquierda tenemos la variable cuantitativa y a la derecha separado por una virgulilla ~ la (o las) variables cualitativas\ndata los datos que vamos a emplear\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEjercicio 1: Calcula la riqueza de especies de cada cuadrícula. Nota: Crea una nueva variable que se llame S_alberta\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 2: Haz un gráfico de caja y bigotes que compare la riqueza entre los dos hábitat\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 3: Teniendo en cuenta este gráfico ¿Crees que habrá diferencias significativas entre hábitats?\n\n\nEjercicio 4: Haz un análisis de la varianza para comprobar si existen diferencias significativas entre muestras los resultados. Guarda el análisis en un objeto que se llame “anova” y explora los resultados\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComprobamos los residuos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¡Las comunidades de Festuca, que son características de zonas más húmedas tienen un mayor número de especies! De hecho las comunidades de Festuca tienen unas 15 especies más que las comunidades mixtas"
  },
  {
    "objectID": "Tema3-2-Metodos-anova.html#análisis-de-la-varianza-factores-con-varios-niveles",
    "href": "Tema3-2-Metodos-anova.html#análisis-de-la-varianza-factores-con-varios-niveles",
    "title": "Tema 3. Segunda parte - Anova",
    "section": "1.3 Análisis de la varianza, factores con varios niveles",
    "text": "1.3 Análisis de la varianza, factores con varios niveles\nHasta ahora hemos visto ejemplos con ANOVAS en los que nuestro factor solo tiene dos niveles. Ahora vamos a ver un ejemplo en el que tenemos más niveles.\nAunque habíamos tratado la humedad relativa como variable cuantitativa en realidad es un índice que toma los valores 1, 2, 3. Así que vamos a tranformar la variable en un factor.\n¡OJO! Es muy común que si habéis codificado factores con números R entienda que son valores cuantitativos. Siempre que no sea así tranformad las variables en cualitativas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComo siempre, lo primero es representar los datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEjercicio 5: ¿Cómo intepretamos este resultado?\nGráficos de diagnostico\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-4-Metodos-ordenacion.html",
    "href": "Tema3-4-Metodos-ordenacion.html",
    "title": "Tema 3. Primera parte - Índices de diversidad",
    "section": "",
    "text": "Breve introducción\nLos métodos de ordenación se emplean habitualmente para representar datos que tienen muchas dimensiones (como por ejemmplo los datos de composición específica) a lo largo de un número reducido de ejes.Las bases de datos con multitud de variables son difíciles de representar. En las ordenaciones se asume que la información que contiene nuestra base de datos multivariante tiene información redundante. Así, el análisis de ordenación simplifica o “reduce” esa información para que podamos visualizar las muestras. Esta visualización ofrece una forma sencilla de analizar cómo se ordenan las muestras y ver cuáles son más parecidas entre sí.\nAdemás, una vez que tenemos las muestras “ordenadas” es frecuente que queramos saber si ese orden se corresponde con algún grupo en particular (por ejemplo, el hábitat en el que recogimos las muestras) o con variables ambientales (por ejemplo, si las muestras se ordenan a lo largo de un gradiente de humedad). Algunos métodos de ordenación permiten hacer este tipo de análsis.\nEn este tema vamos centrarnos en análisis de componentes principales que es muy útil para comunidades de especies en las que las diferencias entre comunidades no son muy grandes y, por lo tanto, no hay muchas especies que están ausentes de buena parte de las localidades (la base de datos tiene pocos ceros).\nCuando la composición específica es muy heterogénea o tenemos otro tipo de datos lo mejor es optar por otro tipo de análisis de ordenación. Una buena muy página en la que podéis explorar todas las posibilidades que ofrecen este tipo de análisis es la publicada por David Zeleny vínculo aquí\nComo siempre vamos a trabajar con la base de datos de herbáceas de Alberta.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExisten varias funciones que permiten hacer PCAs en R. Por ejemplo, la función rda() en el paquete vegan, la función prcomp en el paquete stats y la función pca en el paquete labdsv.\nVamos a utilizar la función rda del paquete vegan.\nComenzamos por cargar las librerías\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLa función rda permite hacer Principal component Analysis (PCA), redundancy analysis (RDA),\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara acceder a los elementos de resultados podemo utilizar el comando summary\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEl resumen del análisis nos muestra la proporción de la varianza explicada por cada eje. Esto lo podemos interpretar como la cantidad de información que contienen nuestros ejes con respecto a la información que contiene la base de datos.\n\nEjercicio 1. En el ejemplo de Alberta ¿Qué porcentaje de variabilidad absorbe el primer eje?\n\n\nEjercicio 2. En el ejemplo de Alberta ¿Cuál es la especie que tiene mayor peso en el eje 1?\n\n\nEjercicio 3. En el ejemplo de Alberta ¿Cuál es la especie que tiene mayor peso en el eje 2?\n\n\nEjercicio resuelto. ¿Qué peso tiene las especies Artemisia cana y Artemisia rigida en el eje 1?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAhora pasamos a representar los datos\nTambién podemos hacer una representación gráfica del peso de la varianza que recoje cada eje\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComo podéis ver los nombres de las especies no se leen porque ocupan demasiado espacio. Una posibilidad para solucionarlo es abreviar los nombres de las especies. Para eso, por convención se cogen las tres letras del epiteto genérico y las primeras tres del epiteto de especie o subespecie.\n¡OJO! En la base de datos las especies están separadas por un guión bajo. Lo primero que tenemos que hacer es sustituir el guión bajo por un espacio para lo que usaremos la función gsub\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCambiamos el nombre de las columnas de la matriz.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nY recalculamos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTA: En análisis de componentes principales (PCA) también se puede emplear para resumir información ambiental. Es adecuado cuando tenemos muchas variables ambientales y queremos simplificar (reducir las dimensiones). Por ejemplo, lo podríamos emplear para resumir la información climática de la base de datos de AFLIBER.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema2.html#reestructuración-de-datos-pivot_longer-y-pivot_wider",
    "href": "Tema2.html#reestructuración-de-datos-pivot_longer-y-pivot_wider",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "4. Reestructuración de datos: pivot_longer() y pivot_wider()",
    "text": "4. Reestructuración de datos: pivot_longer() y pivot_wider()\nCuando trabajamos con datos de biodiversidad, muchas veces las tablas que recibimos no tienen la forma que necesitamos. A veces son anchas (muchas columnas para las especies) y queremos pasarlas a largas (una sola columna con los nombres de especies y otra con sus valores).\nEn otras ocasiones ocurre lo contrario: tenemos los datos en formato largo y queremos volver a un formato ancho.\nAquí es donde entran dos funciones clave de tidyr:\npivot_longer() → convierte columnas en filas.\npivot_wider() → convierte filas en columnas.\n¿Por qué es importante?\n\nEl formato largo es mucho más flexible para análisis y visualización (por ejemplo, para graficar con ggplot2).\nEl formato ancho es útil para reportes y cálculos más directos.\nSaber moverse entre ambos formatos es esencial en ecología y biodiversidad, donde trabajamos con comunidades de especies.\n\nCuando trabajamos con datos de biodiversidad, a menudo tenemos tablas en formato ancho (una columna por especie) y necesitamos transformarlas a formato largo (una columna para especies y otra para sus valores). La función que usamos en tidyr para esto es:\npivot_longer(data,\ncols,\nnames_to = \"nombre_columna\",\nvalues_to = \"nombre_valores\")\n\nArgumentos principales\n\ndata: el data frame o tibble con tus datos. Normalmente se usa dentro de un pipe (%&gt;%).\ncols: columnas que quieres transformar en filas. Ejemplo: cols = -plot o cols = c(Carex_filifolia, Artemisia_frigida).\nnames_to: nombre de la nueva columna con los nombres de las variables originales. Ejemplo: names_to = \"species\".\nvalues_to: nombre de la nueva columna con los valores de esas variables. Ejemplo: values_to = \"abundance\".\n\n\nEjemplo\nSupongamos que tenemos esta tabla:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTransformamos con pivot_longer():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 4. Pasa la tabla de datos de comunidades de Alberta a formato largo"
  },
  {
    "objectID": "Tema2.html#pivot_wider-pasar-a-formato-ancho",
    "href": "Tema2.html#pivot_wider-pasar-a-formato-ancho",
    "title": "Tema 2. Manejo y filtrado de datos de biodiversidad.",
    "section": "pivot_wider(): pasar a formato ancho",
    "text": "pivot_wider(): pasar a formato ancho\nCuando trabajamos con datos de biodiversidad, a veces los tenemos en formato largo (una fila por especie y parcela) y necesitamos transformarlos a formato ancho (una columna por especie). La función que usamos en tidyr es:\n{webr-r, eval=FALSE} pivot_wider(data, names_from = \"nombre_columna\", values_from = \"nombre_valores\")\n\nArgumentos principales\n\ndata: el data frame o tibble con tus datos. Normalmente se usa dentro de un pipe (%&gt;%).\nnames_from: columna que contiene los nombres de las variables que se convertirán en columnas. Por ejemplo, si tenemos una columna species con los nombres de las especies, cada especie se convertirá en una nueva columna.\nvalues_from: columna que contiene los valores asociados a las variables que se convertirán en columnas. Por ejemplo, si tenemos una columna abundance con las abundancias de cada especie, esos valores se colocarán en las nuevas columnas.\nid_cols (opcional): columnas que identifican de manera única cada fila. Si no se especifica, pivot_wider() intenta deducirlas automáticamente.\nnames_prefix (opcional): prefijo que se puede añadir a los nombres de las nuevas columnas.\nvalues_fill (opcional): valor con el que rellenar las celdas vacías en el caso de que no haya datos. Por ejemplo, values_fill = 0.\n\n\n\nEjemplo\nA partir de la tabla en formato largo que acabamos de crear:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTransformamos con pivot_wider():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEjercicio 5 Reconstruye la tabla ancha de datos de Alberta usando pivot_wider()\n\n\n\nla función rename\nSirve para renombrar una variable, manteniendo todo el contenido idéntico.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nla función arrange\nSirve para cambiar el orden de la tabla en función de una o más variables. Por defecto, ordena por orden creciente (alfabético para character). Para hacerlo descendiente, se pone desc(variable).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCategorización múltiple con case_when\nSe utiliza dentro de mutate, de modo similar a if_else, pero permitiendo más niveles.\nHay que tener cuidado con casos que cumplan más de una condición (prioriza el criterio que está antes) o no cumplan ninguna (resultará un NA).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html",
    "href": "Tema4.html",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "El paquete ggplot2 se basa en la gramática interna de un gráfico; no es una función para hacer cada tipo de gráfico, sino una manera de entenderlos, y por tanto “universal”. Ver presentación complementaria\nEn este caso también vamos a ir añadiendo capas línea a línea, pero en vez de pipes ( %&gt;% ) usaremos símbolo de suma ( + ) para encadenar instrucciones.\nPara esta sesión vamos a utilizar los datos penguins de Palmer\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nggplot2 entiende los gráficos como una serie de capas (datos, posición de ejes, colores, temas…), pero solo hay tres obligatorios, mientras que el resto tienen valores por defecto razonables.\nArgumentos obligatorios:\n\nData: un dataset. penguins en nuestro ejemplo.\nMapping: el enlace entre nuestos datos y el gráfico. ¿Qué información guardada en cada columna va a ser referida en el gráfico (ejes, color/relleno, tamaño…)? Todo esto se encuadra dentro de la función aes().\nGeometries: qué tipo de gráfico queremos (puntos, líneas, barras, histograma…).\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n¿Podríamos colorear todo de azul?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este caso, color va dentro de aes() ya que está referido a una columna.\nSe pueden modificar muchos parámetros, como transparencia, tamaño del punto…\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nHasta ahora, lo único que hemos graficado han sido gráficos de dispersión(geom_point()), pero podemos hacer muchos otros tipos de gráfico.\n\n\nPor ejemplo, podemos añadir una línea de regresión a nuestro gráfico previo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nUn gráfico comun para ver la distribución de valores de una variable es un histograma. En este caso solo hay valor x (continua), ya que la y es el conteo de veces que se toma el valor.\nPara ver cómo se distribuyen los valores de masa corporal:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nDe manera clásica, se han utilizado boxplots para ver si hay diferencias entre grupos. Además, si queremos ver los datos “brutos” podemos poner las observaciones “agitadas” para ver cómo se distribuyen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna alternativa a esto sería hacer un gráfico de violines, en el que se muestra la distribución de la densidad de puntos por grupo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nLos cambios de valores (color, relleno, transparencia) por defecto hay que cambiarlos utilizando la capa scales.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO para una variable continua:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPara ver cómo se distribuyen los casos en nuestro dataset podemos “romperlo” en función de una (wrap) o dos (grid) variables, dejando todo lo demás igual.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nLa capa theme hace referencia a todo lo que se refiere al “marco”, pero no afecta a la salida de nuestros datos (es decir, nombres de ejes, visualización, etc.).\nLa función labs() permite fijar el nombre del eje x, y, título y descripción.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás, podemos quitar el tema por defecto (gris) y poner otro en blanco y negro (por ejemplo).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nY editar el texto de los ejes, color de la cuadrícula, etc..\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPongamos que tenemos dos gráficos complementarios que queremos mostrar\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPodemos hacer una única figura para guardarla después\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#las-capas-de-ggplot",
    "href": "Tema4.html#las-capas-de-ggplot",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "ggplot2 entiende los gráficos como una serie de capas (datos, posición de ejes, colores, temas…), pero solo hay tres obligatorios, mientras que el resto tienen valores por defecto razonables.\nArgumentos obligatorios:\n\nData: un dataset. penguins en nuestro ejemplo.\nMapping: el enlace entre nuestos datos y el gráfico. ¿Qué información guardada en cada columna va a ser referida en el gráfico (ejes, color/relleno, tamaño…)? Todo esto se encuadra dentro de la función aes().\nGeometries: qué tipo de gráfico queremos (puntos, líneas, barras, histograma…)."
  },
  {
    "objectID": "Tema4.html#la-capa-mapping",
    "href": "Tema4.html#la-capa-mapping",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n¿Podríamos colorear todo de azul?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEn este caso, color va dentro de aes() ya que está referido a una columna.\nSe pueden modificar muchos parámetros, como transparencia, tamaño del punto…\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#tipos-de-gráfico-la-capa-geometries",
    "href": "Tema4.html#tipos-de-gráfico-la-capa-geometries",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Hasta ahora, lo único que hemos graficado han sido gráficos de dispersión(geom_point()), pero podemos hacer muchos otros tipos de gráfico.\n\n\nPor ejemplo, podemos añadir una línea de regresión a nuestro gráfico previo:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nUn gráfico comun para ver la distribución de valores de una variable es un histograma. En este caso solo hay valor x (continua), ya que la y es el conteo de veces que se toma el valor.\nPara ver cómo se distribuyen los valores de masa corporal:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nDe manera clásica, se han utilizado boxplots para ver si hay diferencias entre grupos. Además, si queremos ver los datos “brutos” podemos poner las observaciones “agitadas” para ver cómo se distribuyen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUna alternativa a esto sería hacer un gráfico de violines, en el que se muestra la distribución de la densidad de puntos por grupo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#edición-de-colores-la-capa-scales.",
    "href": "Tema4.html#edición-de-colores-la-capa-scales.",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Los cambios de valores (color, relleno, transparencia) por defecto hay que cambiarlos utilizando la capa scales.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nO para una variable continua:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#separación-de-casos-la-capa-facets",
    "href": "Tema4.html#separación-de-casos-la-capa-facets",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Para ver cómo se distribuyen los casos en nuestro dataset podemos “romperlo” en función de una (wrap) o dos (grid) variables, dejando todo lo demás igual.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#tema-del-gráfico",
    "href": "Tema4.html#tema-del-gráfico",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "La capa theme hace referencia a todo lo que se refiere al “marco”, pero no afecta a la salida de nuestros datos (es decir, nombres de ejes, visualización, etc.).\nLa función labs() permite fijar el nombre del eje x, y, título y descripción.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAdemás, podemos quitar el tema por defecto (gris) y poner otro en blanco y negro (por ejemplo).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nY editar el texto de los ejes, color de la cuadrícula, etc..\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema3-3-Metodos-regresion.html#la-multicolinealidad",
    "href": "Tema3-3-Metodos-regresion.html#la-multicolinealidad",
    "title": "Tema 3. Tercera parte - Métodos regresión",
    "section": "2.1 La multicolinealidad",
    "text": "2.1 La multicolinealidad\nLa regresión lineal múltiple tiene que cumplir una serie de condiciones adicionales a las que tienen que cumplirse en la regresión lineal simple. Una de las más importantes a tener en cuenta es la multicolinealidad.\nLa multicolinealidad es la correlación alta entre variables explicativas\nCuando la multicolinealidad es alta puede causar los siguientes problemas:\n\nEl valor de los coeficientes es inestable y depende mucho de las otras variables que incluyamos en el modelo.\nDisminuye la precisión del modelo y hace que los p-valores obtenidos no sean robustos\n\nPero ¡ojo! la multicolinealidad no siempre es un problema:\n\nEl efecto de la multicolinealidad depende de cuan grande sea ésta. Si el grado de multicolinealidad es bajo o medio es posible que el efecto sobre la regresión no sea importante. De hecho, casi siempre tenemos algo de multicolinealidad.\nCuando la multicolinealidad es consecuencia de añadir variables elevadas a una potencia o la multiplicación de otras variables en el modelo. En estos casos los p-valores no se verán afectados por la multicolinealidad. Nota: Si queremos eliminar totalmente el problema podemos centrar las variables sustrayendo a cada valor su media.\nLas variables con alta colinealidad son variables dummy que representan variables categóricas con tres o más niveles.\n\nPara analizar el grado de multicolinealidad podemos emplear el factor de inflacción de la varianza o VIF por sus siglas en inglés.\nVamos a explorar unos datos en los que la multicolinealidad es muy alta para ver sus efectos. El ejemplo es una de las bases de datos que vienen con el paquete mtcars.\nCargamos los datos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAjustamos un modelo de regresión\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nY calculamos el factor de inflacción de la varianza (VIF). Para ello emplearemos el paquete car\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPara corregir los problemas de multicolinealidad existen varias estrategias.\nLa más habitual es eliminar una de las variables que estén altamente correlacionadas. Si dos variables están altamente correlacionadas es porque contienen información muy similar y por lo tanto son redundantes. En este escenario podemos eliminar una de ellas. Para ello:\n\nHacemos un análisis de correlación entre pares de variables\nIdentificamos las variables más correlacionadas\nEliminamos una de las correlacionadas\nRepetimos el proceso hasta que el VIF se estabilice\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEjercicio 2 Encuentra una manera de identificar la pareja de variables que tienen el valor máximo de correlación utilizando código de R\nLa variable displacement indica la cilindrada del motor en cm3 la variable wt indica el peso del vehículo. Dado que tienen una correlación &gt;0.8 podemos optar por eliminar una de las dos. Por ejemplo peso del vehíulo\nVolvemos a estimar la regresión linear pero eliminando la variable wt\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTambién podríamos:\n\nCombinar las dos variables relacionadas, por ejemplo sumando sus valores o empleando un índice que resuma ambas variables.\nSi las variables correlacionadas son muchas podemos realizar un análisis de ordenación (ver tema 3.4) con esas variables antes de hacer la regresión. Este análisis extrae unos ejes resumen de modo que podemos emplear esos ejes como variables explicativas en la regresión.\nHay modelos de regresión que como los modelos LASSO y Ridge que están diseñados para trabajar en casos de alta multicolinealidad. Tenéis una descripción de lo que hacen estos modelos y cómo calcularlos aquí. Estos modelos reducen los coeficientes de algunas variables a valores cercanos o iguales a cero. Simplifican los modelos y favorecen una interpretación más sencilla pero aumentan el posible sesgo.\nNOTA: Si es posible es preferible emplear el método de eliminar variables redundantes manualmente empleando criterios científicos claros.\n\n\n\nEjercicio 3 Calcula la diversidad funcional de las comunidades herbáceas de alberta\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEjercicio 4 Estima una regresión múltiple con los herbazales de alberta en la que se emplee el índice riqueza funcional (Fric) de como variable respuesta y las variables, habitat, pendiente, orientación y humedad relativa como variables explicativas\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVamos a ver si se cumplen los supuestos del modelo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLos residuos son normales pero hay signos de heterocedasticidad. Una forma de habitual de solucionar el problema es hacer transformaciones de datos. El objetivo de la transformación de datos es que los residuos tengan una distribución verifique los supuestos del modelo.\nSuele ser útil por comprobar si nuestra variable respuesta o alguna de las variables explicativas tienen distribuciones sesgadas.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComo podemos ver en el gráfico la variable Fric tiene una distribución sesgada hacia valores bajos. Las tranformaciones más empleadas en estos casos son el logaritmo, la raíz cuadrada. Podemos ir probando las transformaciones para ver si alguna de ellas mejora los residuos. Sin embargo, existe un método rápido para analizar la mejora que producen diferenes tranformaciones. El método se llama Box-Cox. Cargamos la librería car\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExtraer el lambda del resultado\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTranformar la variable. Aquí hay dos opciones. Emplear el valor de lambda exacto o bien mirar al gráfico y elegir el tipo de tranformación más cercana. Por ejemplo, en este caso el valor exacto de lambda es 0,22. Hay dos transformaciones posibles. Lambda = 0 que equivale al logaritmo o Lambda = a 0,5 que equivale a la raíz cuadrada. Dado que la curva tiene un descenso más suave hacia mayores valores de Lambda elejimos 0,5. Además, este tipo de tranformación es muy común en datos de este tipo.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAjustar el modelo empleando la variable tranformada\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nComprobamos los residuos\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPor último, ajustamos el modelo, inspeccionamos la significación del modelo empleando un anova y los resultados de los coeficientes con el comando summary\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLos coeficientes de una regresión múltiple se llaman coeficientes o pendientes parciales y se interpretan en el contexto del resto de variables del modelo.\nPor ejemplo, cuando el resto de variables es constante (normalmente igual a la media) podemos decir que el nivel medio de humead tiene un mayor número de especies que el nivel bajo de humedad.\nEs muy útil representar los efectos de cada variable explicativa sobre la variable respuesta cuando el resto de variables explicativas son constantes. Esto muestra el efecto parcial de una variable sobre la respuesta.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#combinar-gráficos-con-patchwork",
    "href": "Tema4.html#combinar-gráficos-con-patchwork",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Pongamos que tenemos dos gráficos complementarios que queremos mostrar\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPodemos hacer una única figura para guardarla después\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Tema4.html#extensiones-de-ggplot",
    "href": "Tema4.html#extensiones-de-ggplot",
    "title": "Tema 4. Representación gráfica y presentación de resultados",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  }
]